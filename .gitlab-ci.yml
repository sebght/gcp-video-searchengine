variables:
  GCP_FUNCTION_NAME: helloGet
  GCP_ZONE: us-central1

stages:
  - build
  - lint
  - test
  - deploy

include:
  - local: '/history-training/5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world/gitlab/template_build.yml'
  - local: '/history-training/5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world/gitlab/template_lint_and_test.yml'
  - local: '/history-training/5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world/gitlab/deploy_template.yml'

build:front:
  # <<: *template_build # on appelle notre template
  extends: .template_build
  before_script:
    - cd history-training/5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world/front
  script: # Les scripts exécutés pendant ce job
    - ./get_api_url.sh
    - npm install
    - npm run build
  after_script: # On sauvegarde le fichier package.json dans le répertoire "dist" pour le mettre en cache
    - cp package.json dist/package.json
  cache: # on définit notre cache
    policy: push
    paths:
      - ./history-training/5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world/front/dist
      - ./history-training/5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world/front/node_modules
  only: # On définit une règle d'exécution : ce job sera fait uniquement sur demo ou en cas de tag
    refs:
      - 5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world
      - tags
    changes:
      - "history-training/5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world/front/*"
    #TODO ajouter only ref merge request et virer le except

lint:front:
  # <<: *template_lint_and_test # on appelle notre template
  extends: .template_lint_and_test
  stage: lint # On lie le job au stage de lint
  before_script:
    - cd history-training/5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world/front
  script: # Les scripts exécutés pendant ce job
    - npm run lint
  only:
    changes:
      - "history-training/5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world/front/*"

test:unit_front:
  # <<: *template_lint_and_test # on appelle notre template
  extends: .template_lint_and_test
  stage: test # On lie le job au stage de test
  before_script:
    - cd history-training/5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world/front
  script: # Les scripts exécutés pendant ce job
    - npm run test:unit
  only:
    changes:
      - "history-training/5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world/front/*"

deploy:back:
  # <<: *deploy_template # on appelle notre template
  extends: .deploy_template
  environment: # On définit notre environnement
    name: demo
    url: https://${GCP_ZONE}-${GCP_PROJECT_ID}.cloudfunctions.net/${GCP_FUNCTION_NAME} # on indique l'url de notre application de demo
  script:
    - cd history-training/5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world/back
    - gcloud functions deploy ${GCP_FUNCTION_NAME} --trigger-http --runtime nodejs8 --service-account ${GCP_CF_SERVICE_ACCOUNT}
  only:
    refs:
      - 5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world
    changes:
      - "history-training/5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world/back/*"

deploy:front_demo:
  # <<: *deploy_template # on appelle notre template
  extends: .deploy_template
  environment: # On définit notre environnement
    name: demo
    url: http://demo-gitlab-ci.storage.googleapis.com/index.html # on indique l'url de notre application de demo
  script:
    - gsutil defacl ch -u AllUsers:READER gs://demo-gitlab-ci # donne l'acces de lecture a tout public
    - gsutil -m -q rsync -R -d ./history-training/5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world/front/dist gs://demo-gitlab-ci 	# upload du dossier dist depuis le dir du SDK
  only:
    refs:
      - 5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world
    changes:
      - "history-training/5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world/front/*"

deploy:front_production:
  # <<: *deploy_template # on appelle notre template
  extends: .deploy_template
  environment: # On définit notre environnement
    name: production
    url: http://production-gitlab-ci.storage.googleapis.com/index.html # on indique l'url de notre application de production
  script:
    - gsutil defacl ch -u AllUsers:READER gs://production-gitlab-ci # donne l'acces de lecture a tout public
    - gsutil -m -q rsync -R -d ./history-training/5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world/front/dist gs://production-gitlab-ci 	# upload du dossier dist depuis le dir du SDK
  only:
    refs:
      - tags
    changes:
      - "history-training/5-configurer-une-pipeline-gitlab-ci-pour-le-hello-world/front/*"